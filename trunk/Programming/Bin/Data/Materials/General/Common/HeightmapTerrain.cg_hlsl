// Copyright (C) 2006-2008 NeoAxis Group

//!!!!!temp. real file path
#include "Data/Materials/General/Common/getFogValue.cg_hlsl"
#include "Data/Materials/General/Common/getShadowmapReceiveValue.cg_hlsl"

#ifdef LAYER0_NORMAL_MAP
#define ALLOW_NORMAL_MAPS
#endif
#ifdef LAYER1_NORMAL_MAP
#define ALLOW_NORMAL_MAPS
#endif
#ifdef LAYER2_NORMAL_MAP
#define ALLOW_NORMAL_MAPS
#endif

half3 expand(half3 v)
{
	return v * 2 - 1;
}

/////////////////////////////////////////////////////////////////////////////////////////

void main_vp(
	uniform float4x4 worldViewProjMatrix,
	uniform float4x4 textureViewProjMatrix,
	uniform float3 cameraPosition,

#if LIGHT_COUNT >= 1
	uniform float4 lightPositionArray[LIGHT_COUNT],
#endif

	float4 position : POSITION,
	float3 normal : NORMAL,

	uniform float2 detailMapsDistanceRange,
	uniform float2 tileMinVertexPosition,
	uniform float4 masksUVTransform,

	//GeoMorphing
#ifdef GEO_MORPHING
	//float4 delta : TEXCOORD1,
	//uniform float morphFactor,
	float4 delta0 : TEXCOORD1,
	uniform float3 morphFactor,
#ifdef GEO_MORPHING_BORDER
	float4 delta1 : TEXCOORD2,
	float4 delta2 : TEXCOORD3,
	float3 deltaIndex : TEXCOORD4,
#endif
#endif

#if LIGHT_COUNT >= 1
	#ifdef SHADOW_MAP
		out float4 oShadowUV : TEXCOORD3,
	#endif
#endif

#ifdef LIGHTMAP
	uniform float4 lightmapTransform,
#endif

#ifdef ALLOW_NORMAL_MAPS
	out float3 oLightDirectionTangentSpace : TEXCOORD4,
#endif

	uniform float3 layer0BaseU,
	uniform float3 layer0BaseV,
	uniform float3 layer0DetailU,
	uniform float3 layer0DetailV,
	out float4 oLayer0BaseDetailUV : TEXCOORD5,
#if LAYERS >= 2
	uniform float3 layer1BaseU,
	uniform float3 layer1BaseV,
	uniform float3 layer1DetailU,
	uniform float3 layer1DetailV,
	out float4 oLayer1BaseDetailUV : TEXCOORD6,
#endif
#if LAYERS >= 3
	uniform float3 layer2BaseU,
	uniform float3 layer2BaseV,
	uniform float3 layer2DetailU,
	uniform float3 layer2DetailV,
	out float4 oLayer2BaseDetailUV : TEXCOORD7,
#endif

	out float4 oPosition : POSITION,
	out float4 oMasksAndLightmapUV : TEXCOORD0,
	out float4 oNormalAndDetailCoefficient : TEXCOORD1,
	out float4 oWorldPositionAndCameraDistance : TEXCOORD2
)
{
	//GeoMorphing
#ifdef GEO_MORPHING
	float4 delta;
	float factor;
#ifdef GEO_MORPHING_BORDER
	delta = delta0 * deltaIndex.x + delta1 * deltaIndex.y + delta2 * deltaIndex.z;
	factor = dot(morphFactor, deltaIndex);
#else
	delta = delta0;
	factor = morphFactor.x;
#endif
	position.z += delta.w * factor;
	normal = normal * (1 - factor) + delta.xyz * factor;
	//position.z += delta.w * morphFactor;
	//normal = normal * (1 - morphFactor) + delta.xyz * morphFactor;
#endif

	//General
	oPosition = mul(worldViewProjMatrix, position);

	//masks and lightmap uv
	float2 localPosition = position.xy - tileMinVertexPosition.xy;
	oMasksAndLightmapUV.xy = masksUVTransform.xy + localPosition * masksUVTransform.zw;
#ifdef LIGHTMAP
	oMasksAndLightmapUV.zw = lightmapTransform.xy + localPosition * lightmapTransform.zw;
#else
	oMasksAndLightmapUV.zw = float2(0,0);
#endif

	//Layers UV
	oLayer0BaseDetailUV.x = dot(position.xyz, layer0BaseU) + .5f;
	oLayer0BaseDetailUV.y = dot(position.xyz, layer0BaseV) + .5f;
	#ifdef LAYER0_DETAIL_MAP
		oLayer0BaseDetailUV.z = dot(position.xyz, layer0DetailU) + .5f;
		oLayer0BaseDetailUV.w = dot(position.xyz, layer0DetailV) + .5f;
	#else
		oLayer0BaseDetailUV.z = 0;
		oLayer0BaseDetailUV.w = 0;
	#endif

#if LAYERS >= 2
	oLayer1BaseDetailUV.x = dot(position.xyz, layer1BaseU) + .5f;
	oLayer1BaseDetailUV.y = dot(position.xyz, layer1BaseV) + .5f;
	#ifdef LAYER1_DETAIL_MAP
		oLayer1BaseDetailUV.z = dot(position.xyz, layer1DetailU) + .5f;
		oLayer1BaseDetailUV.w = dot(position.xyz, layer1DetailV) + .5f;
	#else
		oLayer1BaseDetailUV.z = 0;
		oLayer1BaseDetailUV.w = 0;
	#endif
#endif

#if LAYERS >= 3
	oLayer2BaseDetailUV.x = dot(position.xyz, layer2BaseU) + .5f;
	oLayer2BaseDetailUV.y = dot(position.xyz, layer2BaseV) + .5f;
	#ifdef LAYER2_DETAIL_MAP
		oLayer2BaseDetailUV.z = dot(position.xyz, layer2DetailU) + .5f;
		oLayer2BaseDetailUV.w = dot(position.xyz, layer2DetailV) + .5f;
	#else
		oLayer2BaseDetailUV.z = 0;
		oLayer2BaseDetailUV.w = 0;
	#endif
#endif

	float4 worldPosition = position;//mul(worldMatrix, position);
	float cameraDistance = length(cameraPosition.xyz - worldPosition.xyz);

	oNormalAndDetailCoefficient.xyz = normal;
	oNormalAndDetailCoefficient.w = 
		1.0f - saturate((cameraDistance - detailMapsDistanceRange.x) * detailMapsDistanceRange.y);

	oWorldPositionAndCameraDistance.xyz = worldPosition.xyz;
	oWorldPositionAndCameraDistance.w = cameraDistance;

#if LIGHT_COUNT >= 1
	#ifdef SHADOW_MAP
		oShadowUV = mul(textureViewProjMatrix, worldPosition);
	#endif
#endif

#ifdef ALLOW_NORMAL_MAPS
	float3 lightDirection = float3(0,0,1);
	#if LIGHT_COUNT >= 1
		lightDirection = normalize(lightPositionArray[0].xyz - position.xyz * lightPositionArray[0].w);
	#endif
	float3 tangent = normalize(float3(-normal.z, 0, normal.x));
	float3 binormal = normalize(cross(tangent, normal));
	float3x3 rotation = float3x3(tangent, binormal, normal);
	oLightDirectionTangentSpace = mul(rotation, lightDirection);
#endif

}

/////////////////////////////////////////////////////////////////////////////////////////

void main_fp(

	uniform float3 cameraPosition,
#ifdef ADD_AMBIENT_COLOR
	uniform half4 ambientLightColor,
#endif

#if LIGHT_COUNT >= 1
	uniform float4 lightPositionArray[LIGHT_COUNT],
	uniform float4 lightDirectionArray[LIGHT_COUNT],
	uniform half4 lightAttenuationArray[LIGHT_COUNT],
	uniform half4 lightDiffuseColorArray[LIGHT_COUNT],
	//uniform half4 lightSpecularColorArray[LIGHT_COUNT],
#ifdef LIGHTTYPE_SPOT
	uniform half4 spotLightParamsArray[LIGHT_COUNT],
#endif
	uniform half lightCastShadowsArray[LIGHT_COUNT],
#endif

	//General
	float4 masksAndLightmapUV : TEXCOORD0,
	uniform sampler2D masksMap : register(s0),

	half4 normalAndDetailCoefficient : TEXCOORD1,
	float4 worldPositionAndCameraDistance : TEXCOORD2,

	//Fog
#ifdef FOG_ENABLED
	uniform half4 fogColor,
	uniform half4 fogParams,
#endif

#ifdef LIGHTMAP
	uniform sampler2D lightmap : register(LIGHTMAP_REGISTER),
#endif

#if LIGHT_COUNT >= 1
	#ifdef SHADOW_MAP
		float4 shadowUV : TEXCOORD3,
		uniform sampler2D shadowMap : register(SHADOW_MAP_REGISTER),
		uniform half4 shadowSettings,
	#endif
#endif

#ifdef ALLOW_NORMAL_MAPS
	half3 lightDirectionTangentSpace : TEXCOORD4,
#endif

	//Texturing
#if LAYERS >= 1
	half4 layer0BaseDetailUV : TEXCOORD5,
	uniform sampler2D layer0BaseMap : register(LAYER0_BASE_MAP_REGISTER),
	#ifdef LAYER0_DETAIL_MAP
		uniform sampler2D layer0DetailMap : register(LAYER0_DETAIL_MAP_REGISTER),
	#endif
	#ifdef LAYER0_NORMAL_MAP
		uniform sampler2D layer0NormalMap : register(LAYER0_NORMAL_MAP_REGISTER),
	#endif
#endif

#if LAYERS >= 2
	half4 layer1BaseDetailUV : TEXCOORD6,
	uniform sampler2D layer1BaseMap : register(LAYER1_BASE_MAP_REGISTER),
	#ifdef LAYER1_DETAIL_MAP
		uniform sampler2D layer1DetailMap : register(LAYER1_DETAIL_MAP_REGISTER),
	#endif
	#ifdef LAYER1_NORMAL_MAP
		uniform sampler2D layer1NormalMap : register(LAYER1_NORMAL_MAP_REGISTER),
	#endif
#endif

#if LAYERS >= 3
	half4 layer2BaseDetailUV : TEXCOORD7,
	uniform sampler2D layer2BaseMap : register(LAYER2_BASE_MAP_REGISTER),
	#ifdef LAYER2_DETAIL_MAP
		uniform sampler2D layer2DetailMap : register(LAYER2_DETAIL_MAP_REGISTER),
	#endif
	#ifdef LAYER2_NORMAL_MAP
		uniform sampler2D layer2NormalMap : register(LAYER2_NORMAL_MAP_REGISTER),
	#endif
#endif

	out half4 oColor : COLOR )
{
	float3 worldPosition = worldPositionAndCameraDistance.xyz;
	float cameraDistance = worldPositionAndCameraDistance.w;
	half3 normal = normalAndDetailCoefficient.xyz;
	half detailCoefficient = normalAndDetailCoefficient.w;
	half detailCoefficientCounter = 1.0h - detailCoefficient;
	half detailCoefficient2 = detailCoefficient * 2;

#ifdef ALLOW_NORMAL_MAPS
	half3 lightDirectionTangentSpaceNormalized = /*normalize*/(lightDirectionTangentSpace);
#endif

	//calculate masks values
	half mask0;
	half mask1;
	half mask2;
	{
		half4 masks = (half4)tex2D(masksMap, masksAndLightmapUV.xy/*masksUV*/);
		half realMasks[5];
		realMasks[0] = masks.a;
		realMasks[1] = masks.r;
		realMasks[2] = masks.g;
		realMasks[3] = masks.b;
		realMasks[4] = 1 - (masks.a + masks.r + masks.g + masks.b);

		mask0 = realMasks[LAYER0_REAL_INDEX];
		#if LAYERS >= 2
			mask1 = realMasks[LAYER1_REAL_INDEX];
		#endif
		#if LAYERS >= 3
			mask2 = realMasks[LAYER2_REAL_INDEX];
		#endif
	}

	half3 ambientColor = half3(0,0,0);
	#ifdef ADD_AMBIENT_COLOR
		ambientColor = ambientLightColor.rgb;
	#endif

	half3 lightDiffuseColor = half3(0,0,0);
	//half3 lightSpecularColor = half3(0,0,0);
	half lightMultiplier = 0;
	float3 lightDirection = float3(0,0,0);
	half shadowMultiplier = 1;

	#if LIGHT_COUNT >= 1
		lightDiffuseColor = lightDiffuseColorArray[0].xyz;

		//lightSpecularColor = lightSpecularColorArray[0].xyz;
		lightMultiplier = 1;

		float3 lightVector = lightPositionArray[0].xyz - worldPosition.xyz * lightPositionArray[0].w;
		float distance = length(lightVector);
		lightDirection = lightVector / distance;

		#ifndef LIGHTTYPE_DIRECTIONAL
			lightMultiplier *= saturate(1 / (lightAttenuationArray[0].y + 
				lightAttenuationArray[0].z * distance + lightAttenuationArray[0].w * distance * distance));
		#endif

		#ifdef LIGHTTYPE_SPOT
			// factor in spotlight angle
			half rho0 = saturate(dot(-lightDirectionArray[0].xyz, lightDirection));
			// factor = (rho - cos(outer/2)) / (cos(inner/2) - cos(outer/2)) ^ falloff 
			half spotFactor0 = saturate(pow(saturate(rho0 - spotLightParamsArray[0].y) / 
				(spotLightParamsArray[0].x - spotLightParamsArray[0].y), spotLightParamsArray[0].z));
			lightMultiplier *= spotFactor0;
		#endif

		//Shadows
		#ifdef SHADOW_MAP

			////!!!!!!!
			//#ifndef LIGHTTYPE_POINT
				shadowMultiplier = getShadowmapReceiveValue( shadowUV, shadowMap, 
					shadowSettings, cameraDistance, lightCastShadowsArray[0]);
			//#else
			//	shadowMultiplier = 1;
			//#endif

		#endif

	#endif

	half3 lightColorWithoutNormalMapping;
#ifdef LIGHTMAP
	half3 lightmapColor = (half3)tex2D(lightmap, masksAndLightmapUV.zw).rgb;
	#ifdef SHADOW_MAP
		lightmapColor = min(lightmapColor, 1.0h - sqrt(1.0h - shadowMultiplier));
		//lightmapColor = min(lightmapColor, shadowMultiplier);
	#endif
	//#if LIGHT_COUNT >= 1
	//	lightColorWithoutNormalMapping = ambientColor + lightmapColor * lightMultiplier;
	//#else
	lightColorWithoutNormalMapping = ambientColor + lightmapColor;
	//#endif
#else
	lightMultiplier *= shadowMultiplier;
	lightColorWithoutNormalMapping = ambientColor + 
		lightDiffuseColor * saturate(dot(normal, lightDirection)) * lightMultiplier;
#endif

	half3 color = half3(0,0,0);

	//Layer0
#if LAYERS >= 1

	half3 color0 = (half3)tex2D(layer0BaseMap, layer0BaseDetailUV.xy).rgb * mask0;
	#ifdef LAYER0_DETAIL_MAP
		half3 detail0 = (half3)tex2D(layer0DetailMap, layer0BaseDetailUV.zw).rgb;// * 2;
		color0 *= detailCoefficientCounter.xxx + detail0 * detailCoefficient2;
	#endif
	#ifdef LAYER0_NORMAL_MAP
		#ifdef LAYER0_NORMAL_MAP_TYPE_BASE
			half3 normal0 = /*normalize*/(expand((half3)tex2D(layer0NormalMap, layer0BaseDetailUV.xy).rgb));
			half3 normalMappedCoef0 = ambientColor + lightDiffuseColor *
				(saturate(dot(normal0, lightDirectionTangentSpaceNormalized)) * lightMultiplier);
			color += color0 * normalMappedCoef0;
		#else
			half3 normal0 = /*normalize*/(expand((half3)tex2D(layer0NormalMap, layer0BaseDetailUV.zw).rgb));
			half3 normalMappedCoef0 = ambientColor + lightDiffuseColor *
				(saturate(dot(normal0, lightDirectionTangentSpaceNormalized)) * lightMultiplier);
			color += color0 * (lightColorWithoutNormalMapping * detailCoefficientCounter + 
				normalMappedCoef0 * detailCoefficient);
		#endif
	#else
		#ifdef ALLOW_NORMAL_MAPS
			color += color0 * lightColorWithoutNormalMapping;
		#endif
	#endif

	//#ifdef LAYER0_SPECULAR
	//	half3 specular0 = LAYER0_SPECULAR_COLOR;
	//	#ifdef LAYER0_SPECULAR_MAP
	//		half2 specularMapUV0;
	//		#ifdef LAYER0_SPECULAR_TYPE_BASE
	//			specularMapUV0 = layer0BaseDetailUV.xy;
	//		#else
	//			specularMapUV0 = layer0BaseDetailUV.zw;
	//		#endif
	//		specular0 *= (half3)tex2D(layer0SpecularMap, specularMapUV0).rgb;
	//	#endif

	//	Xxxxx;Normalmapping also need

	//	half3 halfAngle0 = normalize(objectLightDirection0 + eye);
	//	color += specular0 * lightSpecularColor * 
	//		(pow(saturate(dot(n, halfAngle0)), LAYER0_SPECULAR_SHININESS) * objectLightAttenuation0);
	//#endif

#endif

	//Layer1
#if LAYERS >= 2

	half3 color1 = (half3)tex2D(layer1BaseMap, layer1BaseDetailUV.xy).rgb * mask1;
	#ifdef LAYER1_DETAIL_MAP
		half3 detail1 = (half3)tex2D(layer1DetailMap, layer1BaseDetailUV.zw).rgb;// * 2;
		color1 *= detailCoefficientCounter.xxx + detail1 * detailCoefficient2;
	#endif
	#ifdef LAYER1_NORMAL_MAP
		#ifdef LAYER1_NORMAL_MAP_TYPE_BASE
			half3 normal1 = /*normalize*/(expand((half3)tex2D(layer1NormalMap, layer1BaseDetailUV.xy).rgb));
			half3 normalMappedCoef1 = ambientColor + lightDiffuseColor *
				(saturate(dot(normal1, lightDirectionTangentSpaceNormalized)) * lightMultiplier);
			color += color1 * normalMappedCoef1;
		#else
			half3 normal1 = /*normalize*/(expand((half3)tex2D(layer1NormalMap, layer1BaseDetailUV.zw).rgb));
			half3 normalMappedCoef1 = ambientColor + lightDiffuseColor *
				(saturate(dot(normal1, lightDirectionTangentSpaceNormalized)) * lightMultiplier);
			color += color1 * (lightColorWithoutNormalMapping * detailCoefficientCounter + 
				normalMappedCoef1 * detailCoefficient);
		#endif
	#else
		#ifdef ALLOW_NORMAL_MAPS
			color += color1 * lightColorWithoutNormalMapping;
		#endif
	#endif

#endif

	//Layer2
#if LAYERS >= 3

	half3 color2 = (half3)tex2D(layer2BaseMap, layer2BaseDetailUV.xy).rgb * mask2;
	#ifdef LAYER2_DETAIL_MAP
		half3 detail2 = (half3)tex2D(layer2DetailMap, layer2BaseDetailUV.zw).rgb;// * 2;
		color2 *= detailCoefficientCounter.xxx + detail2 * detailCoefficient2;
	#endif
	#ifdef LAYER2_NORMAL_MAP
		#ifdef LAYER2_NORMAL_MAP_TYPE_BASE
			half3 normal2 = /*normalize*/(expand((half3)tex2D(layer2NormalMap, layer2BaseDetailUV.xy).rgb));
			half3 normalMappedCoef2 = ambientColor + lightDiffuseColor *
				(saturate(dot(normal2, lightDirectionTangentSpaceNormalized)) * lightMultiplier);
			color += color2 * normalMappedCoef2;
		#else
			half3 normal2 = /*normalize*/(expand((half3)tex2D(layer2NormalMap, layer2BaseDetailUV.zw).rgb));
			half3 normalMappedCoef2 = ambientColor + lightDiffuseColor *
				(saturate(dot(normal2, lightDirectionTangentSpaceNormalized)) * lightMultiplier);
			color += color2 * (lightColorWithoutNormalMapping * detailCoefficientCounter + 
				normalMappedCoef2 * detailCoefficient);
		#endif
	#else
		#ifdef ALLOW_NORMAL_MAPS
			color += color2 * lightColorWithoutNormalMapping;
		#endif
	#endif

#endif

	//faster calculation if we not have normal maps
#ifndef ALLOW_NORMAL_MAPS
	#if LAYERS >= 1
		color += color0;
	#endif
	#if LAYERS >= 2
		color += color1;
	#endif
	#if LAYERS >= 3
		color += color2;
	#endif
	color *= lightColorWithoutNormalMapping;
#endif

	//Fog
#ifdef FOG_ENABLED
	half fog = getFogValue(cameraDistance, fogParams);
	color = color * fog;
	#ifdef ADD_FOG_COLOR
		color += fogColor.rgb * (1.0h - fog);
	#endif
#endif

	//Result
	oColor = half4(color, 1);
}
