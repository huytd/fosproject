// Copyright (C) 2006-2008 NeoAxis Group

//!!!!!!!
//#ifdef LIGHTTYPE_POINT
//half getShadowmapReceiveValue(float4 shadowUV, samplerCUBE shadowMap, 
//	half4 shadowSettings, half cameraDistance)
//#else
half getShadowmapReceiveValue(float4 shadowUV, sampler2D shadowMap, 
	half4 shadowSettings, half cameraDistance, half lightCastShadows)
//#endif
{
	//half4 shadowSettings:
	//x: shadowFarDistance - shadowMinDistance * 2
	//y: 1 / (shadowFarDistance - shadowMinDistance)
	//z: texture size
	//w: shadow color intensity

	float shadowEpsilon = 0;//0.000001f;

	half final;

	#ifdef SHADOWMAP_HIGH
		//ShadowmapHigh

		half pixelOffset = 1.0f / shadowSettings.z;

		float3 shadowUVScaled = shadowUV.xyz / shadowUV.w;

		//pixel is in lit area. Find out if it's
		//in shadow using 2x2 percentage closest filtering

		//transform to texel space
		float2 texelPos = shadowSettings.z * shadowUVScaled.xy;
		//determine the lerp amounts           
		float2 lerps = frac( texelPos );

		float compareDepth = shadowUVScaled.z - shadowEpsilon;

		//read in bilerp stamp, doing the shadow checks

		float4 values;
//#ifdef LIGHTTYPE_POINT
//#else
		values = float4(
			tex2D( shadowMap, shadowUVScaled.xy ).r,
			tex2D( shadowMap, shadowUVScaled.xy + float2(pixelOffset, 0) ).r,
			tex2D( shadowMap, shadowUVScaled.xy + float2(0, pixelOffset) ).r,
			tex2D( shadowMap, shadowUVScaled.xy + float2(pixelOffset, pixelOffset) ).r);
//#endif

		//values = values < compareDepth.xxxx ? 0.0f : 1.0f;
		values.x = values.x < compareDepth ? 1.0f : 0.0f;
		values.y = values.y < compareDepth ? 1.0f : 0.0f;
		values.z = values.z < compareDepth ? 1.0f : 0.0f;
		values.w = values.w < compareDepth ? 1.0f : 0.0f;
		//values.x = values.x < compareDepth ? 0.0f : 1.0f;
		//values.y = values.y < compareDepth ? 0.0f : 1.0f;
		//values.z = values.z < compareDepth ? 0.0f : 1.0f;
		//values.w = values.w < compareDepth ? 0.0f : 1.0f;

		//!!!!slowly. need "half"
		//lerp between the shadow values to calculate our light amount
		final = lerp( 
			lerp( values.x, values.y, lerps.x ),
			lerp( values.z, values.w, lerps.x ),
			lerps.y );

		//shadow intensity
		//final = 1 - final;
		final = 1 - final * shadowSettings.w;
		//final *= shadowSettings.w;
		//final = 1 - final;

	#else
		//ShadowmapLow

		//#ifdef LIGHTTYPE_POINT
		//#else
		float compareDepth = shadowUV.z / shadowUV.w - shadowEpsilon;
		float depth = tex2Dproj( shadowMap, shadowUV ).r;
		final = depth < compareDepth ? 0.0f : 1.0f;
		//#endif

	#endif

	//fading by distance
	final += saturate( ( cameraDistance + shadowSettings.x ) * shadowSettings.y );
	if(final > 1)
		final = 1;

	//light cast shadows
	if(lightCastShadows < .5)
		final = 1;

	return final;
}
